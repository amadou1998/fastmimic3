<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="4" skipped="0" tests="73" time="398.835" timestamp="2024-10-03T11:53:38.455404+00:00" hostname="1d77abe4936d"><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_sample[preprocessed-IHM]" time="336.630" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_sample[preprocessed-DECOMP]" time="0.035" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_sample[preprocessed-LOS]" time="0.034" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_sample[preprocessed-PHENO]" time="0.037" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_sample[preprocessed-MULTI]" time="1.296" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_sample[discretized-IHM]" time="0.062" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_sample[discretized-DECOMP]" time="0.063" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_sample[discretized-LOS]" time="0.063" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_sample[discretized-PHENO]" time="0.064" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_sample[discretized-MULTI]" time="0.085" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_sample[engineered-IHM]" time="0.062" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_sample[engineered-DECOMP]" time="0.059" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_sample[engineered-LOS]" time="0.057" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_sample[engineered-PHENO]" time="0.054" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_sample[engineered-MULTI]" time="0.000" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_sample_with_ds[DECOMP]" time="0.054" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_sample_with_ds[LOS]" time="0.054" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_sample_with_ts[DECOMP]" time="0.035" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_sample_with_ts[PHENO]" time="0.035" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_sample_with_ts[LOS]" time="0.035" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_sample_with_ts[IHM]" time="0.034" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_samples[preprocessed-IHM]" time="0.392" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_samples[preprocessed-DECOMP]" time="0.712" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_samples[preprocessed-LOS]" time="0.691" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_samples[preprocessed-PHENO]" time="0.748" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_samples[preprocessed-MULTI]" time="2.174" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_samples[discretized-IHM]" time="0.724" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_samples[discretized-DECOMP]" time="1.424" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_samples[discretized-LOS]" time="1.353" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_samples[discretized-PHENO]" time="1.402" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_samples[discretized-MULTI]" time="1.800" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_samples[engineered-IHM]" time="0.646" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_samples[engineered-DECOMP]" time="1.317" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_samples[engineered-LOS]" time="1.279" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_samples[engineered-PHENO]" time="1.241" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_samples[engineered-MULTI]" time="0.000" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_samples_with_ts[DECOMP]" time="1.765" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_samples_with_ts[PHENO]" time="1.742" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_samples_with_ts[LOS]" time="1.813" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_samples_with_ts[IHM]" time="0.903" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_samples_with_ds[DECOMP]" time="1.851" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_read_samples_with_ds[LOS]" time="1.841" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_random_samples[preprocessed-IHM]" time="0.396" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_random_samples[preprocessed-DECOMP]" time="0.794" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_random_samples[preprocessed-LOS]" time="0.745" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_random_samples[preprocessed-PHENO]" time="0.795" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_random_samples[preprocessed-MULTI]" time="2.156" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_random_samples[discretized-IHM]" time="0.829" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_random_samples[discretized-DECOMP]" time="1.363" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_random_samples[discretized-LOS]" time="1.364" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_random_samples[discretized-PHENO]" time="1.382" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_random_samples[discretized-MULTI]" time="1.868" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_random_samples[engineered-IHM]" time="0.722" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_random_samples[engineered-DECOMP]" time="1.340" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_random_samples[engineered-LOS]" time="1.355" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_random_samples[engineered-PHENO]" time="1.265" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_random_samples[engineered-MULTI]" time="0.000" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_random_samples_with_ts[DECOMP]" time="0.280" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_random_samples_with_ts[PHENO]" time="0.191" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_random_samples_with_ts[LOS]" time="0.286" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_random_samples_with_ts[IHM]" time="0.224" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_random_samples_with_ds[DECOMP]" time="2.015" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_random_samples_with_ds[LOS]" time="1.947" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_to_numpy[discretized-IHM]" time="0.889"><failure message="assert 57 == 200">task_name = 'IHM', reader_flavour = 'discretized'
discretized_readers = {'DECOMP': &lt;datasets.readers.ProcessedSetReader object at 0x7dec054550d0&gt;, 'IHM': &lt;datasets.readers.ProcessedSetReader...essedSetReader object at 0x7dec167b3550&gt;, 'MULTI': &lt;datasets.readers.ProcessedSetReader object at 0x7dec170f2a60&gt;, ...}
engineered_readers = {'DECOMP': &lt;datasets.readers.ProcessedSetReader object at 0x7dec171a7ee0&gt;, 'IHM': &lt;datasets.readers.ProcessedSetReader....ProcessedSetReader object at 0x7dec16bbdfd0&gt;, 'PHENO': &lt;datasets.readers.ProcessedSetReader object at 0x7dec170f2700&gt;}

    @pytest.mark.parametrize("task_name", TASK_NAMES)
    @pytest.mark.parametrize("reader_flavour", ["discretized", "engineered"])
    def test_to_numpy(task_name: str, reader_flavour: str,
                      discretized_readers: Dict[str, ProcessedSetReader],
                      engineered_readers: Dict[str, ProcessedSetReader]):
        if task_name == "MULTI":
            # TODO! Implement multi readers
            return
        if reader_flavour == "discretized":
            reader = discretized_readers[task_name]
            imputer = None
        elif reader_flavour == "engineered":
            if task_name == "MULTI":
                return
            reader = engineered_readers[task_name]
            imputer = PartialImputer().fit_reader(reader)
        tests_io(f"Test case for to_numpy for task {task_name}", level=0)
        scaler = MinMaxScaler(imputer=imputer).fit_reader(reader)
    
        dataset = reader.to_numpy(200, scaler=scaler, imputer=imputer, bining="custom")
        for prefix in dataset:
            # Assert 10 samples
&gt;           assert dataset[prefix].shape[0] == 200
E           assert 57 == 200

tests/test_datasets/test_readers/test_processed_set_reader.py:583: AssertionError</failure></testcase><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_to_numpy[discretized-DECOMP]" time="1.044" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_to_numpy[discretized-LOS]" time="1.007" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_to_numpy[discretized-PHENO]" time="1.671"><failure message="assert 113 == 200">task_name = 'PHENO', reader_flavour = 'discretized'
discretized_readers = {'DECOMP': &lt;datasets.readers.ProcessedSetReader object at 0x7dec054550d0&gt;, 'IHM': &lt;datasets.readers.ProcessedSetReader...essedSetReader object at 0x7dec167b3550&gt;, 'MULTI': &lt;datasets.readers.ProcessedSetReader object at 0x7dec170f2a60&gt;, ...}
engineered_readers = {'DECOMP': &lt;datasets.readers.ProcessedSetReader object at 0x7dec171a7ee0&gt;, 'IHM': &lt;datasets.readers.ProcessedSetReader....ProcessedSetReader object at 0x7dec16bbdfd0&gt;, 'PHENO': &lt;datasets.readers.ProcessedSetReader object at 0x7dec170f2700&gt;}

    @pytest.mark.parametrize("task_name", TASK_NAMES)
    @pytest.mark.parametrize("reader_flavour", ["discretized", "engineered"])
    def test_to_numpy(task_name: str, reader_flavour: str,
                      discretized_readers: Dict[str, ProcessedSetReader],
                      engineered_readers: Dict[str, ProcessedSetReader]):
        if task_name == "MULTI":
            # TODO! Implement multi readers
            return
        if reader_flavour == "discretized":
            reader = discretized_readers[task_name]
            imputer = None
        elif reader_flavour == "engineered":
            if task_name == "MULTI":
                return
            reader = engineered_readers[task_name]
            imputer = PartialImputer().fit_reader(reader)
        tests_io(f"Test case for to_numpy for task {task_name}", level=0)
        scaler = MinMaxScaler(imputer=imputer).fit_reader(reader)
    
        dataset = reader.to_numpy(200, scaler=scaler, imputer=imputer, bining="custom")
        for prefix in dataset:
            # Assert 10 samples
&gt;           assert dataset[prefix].shape[0] == 200
E           assert 113 == 200

tests/test_datasets/test_readers/test_processed_set_reader.py:583: AssertionError</failure></testcase><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_to_numpy[discretized-MULTI]" time="0.000" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_to_numpy[engineered-IHM]" time="1.291"><failure message="assert 57 == 200">task_name = 'IHM', reader_flavour = 'engineered'
discretized_readers = {'DECOMP': &lt;datasets.readers.ProcessedSetReader object at 0x7dec054550d0&gt;, 'IHM': &lt;datasets.readers.ProcessedSetReader...essedSetReader object at 0x7dec167b3550&gt;, 'MULTI': &lt;datasets.readers.ProcessedSetReader object at 0x7dec170f2a60&gt;, ...}
engineered_readers = {'DECOMP': &lt;datasets.readers.ProcessedSetReader object at 0x7dec171a7ee0&gt;, 'IHM': &lt;datasets.readers.ProcessedSetReader....ProcessedSetReader object at 0x7dec16bbdfd0&gt;, 'PHENO': &lt;datasets.readers.ProcessedSetReader object at 0x7dec170f2700&gt;}

    @pytest.mark.parametrize("task_name", TASK_NAMES)
    @pytest.mark.parametrize("reader_flavour", ["discretized", "engineered"])
    def test_to_numpy(task_name: str, reader_flavour: str,
                      discretized_readers: Dict[str, ProcessedSetReader],
                      engineered_readers: Dict[str, ProcessedSetReader]):
        if task_name == "MULTI":
            # TODO! Implement multi readers
            return
        if reader_flavour == "discretized":
            reader = discretized_readers[task_name]
            imputer = None
        elif reader_flavour == "engineered":
            if task_name == "MULTI":
                return
            reader = engineered_readers[task_name]
            imputer = PartialImputer().fit_reader(reader)
        tests_io(f"Test case for to_numpy for task {task_name}", level=0)
        scaler = MinMaxScaler(imputer=imputer).fit_reader(reader)
    
        dataset = reader.to_numpy(200, scaler=scaler, imputer=imputer, bining="custom")
        for prefix in dataset:
            # Assert 10 samples
&gt;           assert dataset[prefix].shape[0] == 200
E           assert 57 == 200

tests/test_datasets/test_readers/test_processed_set_reader.py:583: AssertionError</failure></testcase><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_to_numpy[engineered-DECOMP]" time="2.264" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_to_numpy[engineered-LOS]" time="2.174" /><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_to_numpy[engineered-PHENO]" time="2.423"><failure message="assert 113 == 200">task_name = 'PHENO', reader_flavour = 'engineered'
discretized_readers = {'DECOMP': &lt;datasets.readers.ProcessedSetReader object at 0x7dec054550d0&gt;, 'IHM': &lt;datasets.readers.ProcessedSetReader...essedSetReader object at 0x7dec167b3550&gt;, 'MULTI': &lt;datasets.readers.ProcessedSetReader object at 0x7dec170f2a60&gt;, ...}
engineered_readers = {'DECOMP': &lt;datasets.readers.ProcessedSetReader object at 0x7dec171a7ee0&gt;, 'IHM': &lt;datasets.readers.ProcessedSetReader....ProcessedSetReader object at 0x7dec16bbdfd0&gt;, 'PHENO': &lt;datasets.readers.ProcessedSetReader object at 0x7dec170f2700&gt;}

    @pytest.mark.parametrize("task_name", TASK_NAMES)
    @pytest.mark.parametrize("reader_flavour", ["discretized", "engineered"])
    def test_to_numpy(task_name: str, reader_flavour: str,
                      discretized_readers: Dict[str, ProcessedSetReader],
                      engineered_readers: Dict[str, ProcessedSetReader]):
        if task_name == "MULTI":
            # TODO! Implement multi readers
            return
        if reader_flavour == "discretized":
            reader = discretized_readers[task_name]
            imputer = None
        elif reader_flavour == "engineered":
            if task_name == "MULTI":
                return
            reader = engineered_readers[task_name]
            imputer = PartialImputer().fit_reader(reader)
        tests_io(f"Test case for to_numpy for task {task_name}", level=0)
        scaler = MinMaxScaler(imputer=imputer).fit_reader(reader)
    
        dataset = reader.to_numpy(200, scaler=scaler, imputer=imputer, bining="custom")
        for prefix in dataset:
            # Assert 10 samples
&gt;           assert dataset[prefix].shape[0] == 200
E           assert 113 == 200

tests/test_datasets/test_readers/test_processed_set_reader.py:583: AssertionError</failure></testcase><testcase classname="test_datasets.test_readers.test_processed_set_reader" name="test_to_numpy[engineered-MULTI]" time="0.001" /></testsuite></testsuites>