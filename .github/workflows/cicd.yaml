# CI/CD pipeline builds the Docker image and pushes it to the GitHub Container Registry
# Then it runs the Sphinx documentation build and deploys it to GitHub Pages
# Finally it tests the pymimic3 package
# -- DEBUG --
# Trigger: >git commit --allow-empty -m "Trigger pipeline" && git push

name: CI/CD Pipeline

on: [push, pull_request, workflow_dispatch]

permissions:
  contents: write

jobs:
  build-and-push:
    # |-> 1. pull code
    # |-> 2. set up docker buildx 
    # |-> 3. login to docker hub
    # |-> 4. setup cache dir
    # |      - ?=self-hosted
    # |-> 5. extract branch name
    # |-> 6. setup cache on runner machine
    # |      - ?=self-hosted|github-hosted
    # |-> 7. build and push docker image
    # |      - ?=self-hosted|github-hosted
    # |-> 8. move cache
    # |-> 9. scan image for vulnerabilities
    runs-on: self-hosted # -> ubuntu-latest to run in github cloud
    steps:
      # => 1. Pull code into runner env
      - name: Checkout code
        uses: actions/checkout@v4

      # => 2. Set up Docker Buildx step
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # => 3. Login to docker hub to push images
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          # Secrets stored in repository
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # => 4. Create cache directory if runing locally
      - name: Set up Docker cache directory
        if: runner.environment == 'self-hosted'
        run: |
          echo cache dir is: ${{ env.DOCKER_CACHE_DIR }}
          if [ -n "$DOCKER_CACHE_DIR" ]; then
            echo "Using runner's DOCKER_CACHE_DIR: $DOCKER_CACHE_DIR"
          else
            DOCKER_CACHE_DIR="/tmp"
            echo "DOCKER_CACHE_DIR not set on runner. Using default: $DOCKER_CACHE_DIR"
          fi
          echo "DOCKER_CACHE_DIR=$DOCKER_CACHE_DIR" >> $GITHUB_ENV
          mkdir -p $DOCKER_CACHE_DIR

      # => 5. Extract branch name (may fail on pull requests, untested)
      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch
      
      # => 6. Setup cache on runner machine: self-hosted
      - name: Cache Docker layers locally
        if: runner.environment == 'self-hosted'
        uses: maxnowack/local-cache@v2
        with: 
          path: ${{ env.DOCKER_CACHE_DIR }}/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
      
      # => 6. Setup cache on github cache: github hosted
      - name: Cache Docker layers on github
        if: runner.environment == 'github-hosted'
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # => 7. Build and push Docker image: self-hosted
      - name: Local build and push
        if: runner.environment == 'self-hosted'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .devcontainer/Dockerfile.ci
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            tensorpod/pymimic3:latest
            tensorpod/pymimic3:${{ steps.extract_branch.outputs.branch }}
          cache-from: type=local,src=${{ env.DOCKER_CACHE_DIR }}/.buildx-cache
          cache-to: type=local,dest=${{ env.DOCKER_CACHE_DIR }}/.buildx-cache-new,mode=max

      # => 7. Build and push Docker image: github hosted
      - name: Github build and push
        if: runner.environment == 'github-hosted'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .devcontainer/Dockerfile.ci
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            tensorpod/pymimic3:latest
            tensorpod/pymimic3:${{ steps.extract_branch.outputs.branch }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # => 8. Move the cache with -new suffix to original cache
      - name: Move cache
        run: |
          if [ "${{ runner.environment }}" = "self-hosted" ]; then
            rm -rf ${{ env.DOCKER_CACHE_DIR }}/.buildx-cache
            mv ${{ env.DOCKER_CACHE_DIR }}/.buildx-cache-new ${{ env.DOCKER_CACHE_DIR }}/.buildx-cache
          elif [ "${{ runner.environment }}" = "github-hosted" ]; then
            rm -rf tmp/.buildx-cache
            mv tmp/.buildx-cache-new tmp/.buildx-cache
          fi

      # => 9. Scan image for vulnerabilities
      - name: Scan image for vulnerabilities
        uses: anchore/scan-action@v3
        with:
          image: "tensorpod/pymimic3:${{ steps.extract_branch.outputs.branch }}"
          fail-build: false
          severity-cutoff: high
 # # Documentation build and deploy
 # docs:
 #   runs-on: self-hosted
 #   needs: build-and-push
 #   steps:
 #     - uses: actions/checkout@v4
 #     - uses: actions/setup-python@v5
 #     - name: Install dependencies
 #       run: |
 #         pip install sphinx sphinx_rtd_theme myst_parser
 #     - name: Sphinx build
 #       run: |
 #         sphinx-build doc _build
 #     - name: Deploy to GitHub Pages
 #       uses: peaceiris/actions-gh-pages@v3
 #       if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
 #       with:
 #         publish_branch: gh-pages
 #         github_token: ${{ secrets.GITHUB_TOKEN }}
 #         publish_dir: _build/
 #         force_orphan: true
#
# Pytest run test
  pytest:
    runs-on: self-hosted
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Load cached image
        run: |
          docker load -i ~/image-cache/pymimic3.tar
          echo "Loaded cached image for testing"
      - name: Test generators
        run: |
          docker run --rm tensorpod/pymimic3:latest pytest /workingdir/tests/test_generators.py
      - name: Upload pytest results
        uses: actions/upload-artifact@v3
        with:
          name: pytest-results
          path: pytest-results/