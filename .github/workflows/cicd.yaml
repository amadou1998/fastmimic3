# CI/CD pipeline builds the Docker image and pushes it to the GitHub Container Registry
# Then it runs the Sphinx documentation build and deploys it to GitHub Pages
# Finally it tests the pymimic3 package
# -- DEBUG --
# Trigger: git commit --allow-empty -m "Trigger pipeline" && git push

name: CI/CD Pipeline

on: [push, pull_request, workflow_dispatch]

permissions:
  contents: write

jobs:
  test-and-build:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set branch name
        run: echo "ref_name=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV

      - name: Check for cached images
        id: check-image-cache
        run: |
          mkdir -p ~/image-cache
          if [ -f ~/image-cache/pymimic3.latest.tar ]; then
            echo "cache-hit-latest=true" >> $GITHUB_ENV
          else
            echo "cache-hit-latest=false" >> $GITHUB_ENV
          fi
          if [ -f ~/image-cache/pymimic3.${{ env.ref_name }}.tar ]; then
            echo "cache-hit-branch=true" >> $GITHUB_ENV
          else
            echo "cache-hit-branch=false" >> $GITHUB_ENV
          fi

      - name: Load latest cached image
        if: env.cache-hit-latest == 'true'
        run: |
          docker load -i ~/image-cache/pymimic3.latest.tar
          echo "Loaded latest cached image"

      - name: Load branch cached image
        if: env.cache-hit-branch == 'true'
        run: |
          docker load -i ~/image-cache/pymimic3.${{ env.ref_name }}.tar
          echo "Loaded branch cached image: ${{ env.ref_name }}"

      - name: Build Docker image
        run: |
          docker build -t tensorpod/pymimic3:latest -t tensorpod/pymimic3:${{ env.ref_name }} -f .devcontainer/Dockerfile.ci .

      - name: Save latest image to cache
        run: |
          docker save -o ~/image-cache/pymimic3.latest.tar tensorpod/pymimic3:latest
          echo "Saved latest image to cache"

      - name: Save branch image to cache
        run: |
          docker save -o ~/image-cache/pymimic3.${{ env.ref_name }}.tar tensorpod/pymimic3:${{ env.ref_name }}
          echo "Saved branch image to cache: ${{ env.ref_name }}"

      - name: Push image
        if: github.event_name != 'pull_request'
        run: |
          docker push tensorpod/pymimic3:latest
          docker push tensorpod/pymimic3:${{ env.ref_name }}

      - name: Scan image for vulnerabilities
        uses: anchore/scan-action@v3
        with:
          image: "tensorpod/pymimic3:${{ env.ref_name }}"
          fail-build: false
          severity-cutoff: high
  # Documentation build and deploy
  docs:
    runs-on: self-hosted
    needs: test-and-build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
      - name: Install dependencies
        run: |
          pip install sphinx sphinx_rtd_theme myst_parser
      - name: Sphinx build
        run: |
          sphinx-build doc _build
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        with:
          publish_branch: gh-pages
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: _build/
          force_orphan: true

  # Pytest run test
  pytest:
    runs-on: self-hosted
    needs: test-and-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load cached image
        run: |
          docker load -i ~/image-cache/pymimic3.tar
          echo "Loaded cached image for testing"

      - name: Test generators
        run: |
          docker run --rm tensorpod/pymimic3:latest pytest /workingdir/tests/test_generators.py

      - name: Upload pytest results
        uses: actions/upload-artifact@v3
        with:
          name: pytest-results
          path: pytest-results/